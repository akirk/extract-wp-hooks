name: "Extract WordPress Hooks"
description: "Extract WordPress hooks from your repository and generate wiki documentation"
author: "Alex Kirk"

inputs:
  config-file:
    description: "Path to the extract-wp-hooks.json configuration file (optional if other config inputs are provided)"
    required: false
    default: ".extract-wp-hooks.json"
  namespace:
    description: "PHP Namespace that's used."
    required: false
  base-dir:
    description: "Base directory to scan for hooks (default: current directory)"
    required: false
    default: "."
  wiki-directory:
    description: "Directory to store wiki files"
    required: false
    default: "wiki"
  github-blob-url:
    description: "GitHub blob URL for source links"
    required: false
  exclude-dirs:
    description: "Comma-separated list of directories to exclude"
    required: false
    default: "vendor,node_modules"
  ignore-filters:
    description: "Comma-separated list of filter names to ignore"
    required: false
    default: ""
  ignore-regex:
    description: "Regex pattern to ignore filter names"
    required: false
  section:
    description: "How to group hooks in documentation: 'file' or 'dir'"
    required: false
    default: "file"
  wiki-repo:
    description: "Wiki repository URL (e.g., username/repo.wiki.git)"
    required: false
    default: ""
  example-style:
    description: "Style for the auto-generated example code: 'default' or 'prefixed'"
    required: false
    default: "default"

outputs:
  hooks-found:
    description: "Number of hooks found and processed"
    value: "${{ steps.extract-wp-hooks.outputs.hooks-found }}"
  wiki-files:
    description: "Number of wiki files generated"
    value: "${{ steps.extract-wp-hooks.outputs.wiki-files }}"

runs:
  using: "composite"
  steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: "8.0"

    - name: Determine wiki repository
      shell: bash
      id: wiki-repo
      run: |
        if [ -n "${{ inputs.wiki-repo }}" ]; then
          echo "url=${{ inputs.wiki-repo }}" >> $GITHUB_OUTPUT
        else
          echo "url=${GITHUB_REPOSITORY}.wiki.git" >> $GITHUB_OUTPUT
        fi

    - name: Create configuration file
      shell: bash
      id: config-setup
      run: |
        config_file="${{ inputs.config-file }}"

        # If config file doesn't exist, create one from inputs
        if [ ! -f "$config_file" ]; then
          echo "Creating config file from action inputs..."

          # Determine GitHub blob URL
          if [ -n "${{ inputs.github-blob-url }}" ]; then
            github_blob_url="${{ inputs.github-blob-url }}"
          else
            github_blob_url="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF_NAME}/"
          fi

          # Build exclude_dirs array
          exclude_dirs=""
          if [ -n "${{ inputs.exclude-dirs }}" ]; then
            IFS=',' read -ra DIRS <<< "${{ inputs.exclude-dirs }}"
            for dir in "${DIRS[@]}"; do
              if [ -z "$exclude_dirs" ]; then
                exclude_dirs="\"$dir\""
              else
                exclude_dirs="$exclude_dirs, \"$dir\""
              fi
            done
          fi

          # Build ignore_filter array
          ignore_filters=""
          if [ -n "${{ inputs.ignore-filters }}" ]; then
            IFS=',' read -ra FILTERS <<< "${{ inputs.ignore-filters }}"
            for filter in "${FILTERS[@]}"; do
              if [ -z "$ignore_filters" ]; then
                ignore_filters="\"$filter\""
              else
                ignore_filters="$ignore_filters, \"$filter\""
              fi
            done
          fi

          # Create the config file
          cat > "$config_file" << EOF
        {
            "namespace": "${{ inputs.namespace }}",
            "base_dir": "${{ inputs.base-dir }}",
            "wiki_directory": "${{ inputs.wiki-directory }}",
            "github_blob_url": "$github_blob_url",
            "exclude_dirs": [$exclude_dirs],
            "example_style": "${{ inputs.example-style }}",
            "ignore_filter": [$ignore_filters]$([ -n "${{ inputs.ignore-regex }}" ] && echo ',
            "ignore_regex": "${{ inputs.ignore-regex }}"' || echo '')$([ "${{ inputs.section }}" != "file" ] && echo ',
            "section": "${{ inputs.section }}"' || echo '')
        }
        EOF
          echo "Generated config file: $config_file"
        else
          echo "Using existing config file: $config_file"
        fi

        # Determine wiki directory from config file
        wiki_dir=$(jq -r '.wiki_directory' "$config_file")
        echo "wiki-directory=$wiki_dir" >> $GITHUB_OUTPUT
        echo "Using wiki directory: $wiki_dir"

    - name: Clone wiki repository
      shell: bash
      run: |
        wiki_dir="${{ steps.config-setup.outputs.wiki-directory }}"
        protocol=$(echo "$github_server_url" | cut -d/ -f1)
        git clone "https://x:${{ github.token }}@github.com/${{ steps.wiki-repo.outputs.url }}" "$wiki_dir" || {
          echo "Wiki repository not found. Creating wiki directory for output."
          mkdir -p "$wiki_dir"
        }

    - name: Extract WordPress hooks
      shell: bash
      id: extract-wp-hooks
      run: |
        # Run the PHP script
        php "${{ github.action_path }}/extract-wp-hooks.php"

        # Get output values
        wiki_dir="${{ steps.config-setup.outputs.wiki-directory }}"
        wiki_files=$(find "$wiki_dir" -type f -name "*.md" | tr '\n' ':')
        hooks_count=$(echo "$wiki_files" | tr ':' '\n' | grep -c .)
        echo "hooks-found=$hooks_count" >> $GITHUB_OUTPUT
        echo "wiki-files=$wiki_files" >> $GITHUB_OUTPUT
        echo "Found $hooks_count hook documentation files"

    - name: Commit and push wiki changes
      shell: bash
      run: |
        wiki_dir="${{ steps.config-setup.outputs.wiki-directory }}"
        cd "$wiki_dir"
        git config --global --add safe.directory "$wiki_dir"
        if [ -d ".git" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update hook documentation from ${GITHUB_REPOSITORY}@${GITHUB_SHA::7}"
            git push origin master
            echo "Wiki updated successfully"
          fi
        else
          echo "Wiki files generated in 'wiki' directory but no git repository found"
        fi

branding:
  icon: "book-open"
  color: "blue"
