name: "Extract WordPress Hooks"
description: "Extract WordPress hooks from your repository and generate wiki documentation"
author: "Alex Kirk"

inputs:
  config-file:
    description: "Path to the extract-wp-hooks.json configuration file (optional if other config inputs are provided)"
    required: false
    default: ".extract-wp-hooks.json"
  namespace:
    description: "PHP Namespace that's used."
    required: false
  base-dir:
    description: "Base directory to scan for hooks (default: current directory)"
    required: false
    default: "."
  wiki-directory:
    description: "Directory to store wiki files"
    required: false
    default: "wiki"
  github-blob-url:
    description: "GitHub blob URL for source links"
    required: false
  exclude-dirs:
    description: "Comma-separated list of directories to exclude"
    required: false
    default: "vendor,node_modules"
  ignore-filters:
    description: "Comma-separated list of filter names to ignore"
    required: false
    default: ""
  ignore-regex:
    description: "Regex pattern to ignore filter names"
    required: false
  section:
    description: "How to group hooks in documentation: 'file' or 'dir'"
    required: false
    default: "file"
  wiki-repo:
    description: "Wiki repository URL (e.g., username/repo.wiki.git)"
    required: false
    default: ""

outputs:
  hooks-found:
    description: "Number of hooks found and processed"
    value: "${{ steps.extract-wp-hooks.outputs.hooks-found }}"
  wiki-files:
    description: "Number of wiki files generated"
    value: "${{ steps.extract-wp-hooks.outputs.wiki-files }}"

runs:
  using: "composite"
  steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: "8.0"

    - name: Determine wiki repository
      shell: bash
      id: wiki-repo
      run: |
        if [ -n "${{ inputs.wiki-repo }}" ]; then
          echo "url=${{ inputs.wiki-repo }}" >> $GITHUB_OUTPUT
        else
          echo "url=${GITHUB_REPOSITORY}.wiki.git" >> $GITHUB_OUTPUT
        fi

    - name: Determine GitHub blob URL
      shell: bash
      id: github-blob-url
      run: |
        if [ -n "${{ inputs.github-blob-url }}" ]; then
          echo "url=${{ inputs.github-blob-url }}" >> $GITHUB_OUTPUT
        else
          echo "url=https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF_NAME}/" >> $GITHUB_OUTPUT
        fi

    - name: Clone wiki repository
      shell: bash
      run: |
        wiki_dir="${{ inputs.wiki-directory }}"
        git clone "https://x:${{ github.token }}@github.com/${{ steps.wiki-repo.outputs.url }}" "$wiki_dir" || {
          echo "Wiki repository not found. Creating wiki directory for output."
          mkdir -p "$wiki_dir"
        }

    - name: Extract WordPress hooks
      shell: bash
      id: extract-wp-hooks
      run: |
        # Set environment variables only if inputs are provided and different from defaults
        if [ -n "${{ inputs.namespace }}" ]; then
          export EXTRACT_WP_HOOKS_NAMESPACE="${{ inputs.namespace }}"
        fi
        
        if [ "${{ inputs.base-dir }}" != "." ]; then
          export EXTRACT_WP_HOOKS_BASE_DIR="${{ inputs.base-dir }}"
        fi
        
        if [ "${{ inputs.wiki-directory }}" != "wiki" ]; then
          export EXTRACT_WP_HOOKS_WIKI_DIRECTORY="${{ inputs.wiki-directory }}"
        fi
        
        if [ -n "${{ inputs.github-blob-url }}" ]; then
          export EXTRACT_WP_HOOKS_GITHUB_BLOB_URL="${{ inputs.github-blob-url }}"
        else
          export EXTRACT_WP_HOOKS_GITHUB_BLOB_URL="${{ steps.github-blob-url.outputs.url }}"
        fi
        
        if [ "${{ inputs.exclude-dirs }}" != "vendor,node_modules" ]; then
          export EXTRACT_WP_HOOKS_EXCLUDE_DIRS="${{ inputs.exclude-dirs }}"
        fi
        
        if [ -n "${{ inputs.ignore-filters }}" ]; then
          export EXTRACT_WP_HOOKS_IGNORE_FILTER="${{ inputs.ignore-filters }}"
        fi
        
        if [ -n "${{ inputs.ignore-regex }}" ]; then
          export EXTRACT_WP_HOOKS_IGNORE_REGEX="${{ inputs.ignore-regex }}"
        fi
        
        if [ "${{ inputs.section }}" != "file" ]; then
          export EXTRACT_WP_HOOKS_SECTION="${{ inputs.section }}"
        fi
        
        # Check if config file exists and use it if specified
        if [ -n "${{ inputs.config-file }}" ] && [ -f "${{ inputs.config-file }}" ]; then
          echo "Using config file: ${{ inputs.config-file }}"
        fi
        
        # Run the PHP script
        php "${{ github.action_path }}/extract-wp-hooks.php"
        
        # Get output values
        wiki_dir="${{ inputs.wiki-directory }}"
        wiki_files=$(find "$wiki_dir" -type f -name "*.md" | tr '\n' ':')
        hooks_count=$(echo "$wiki_files" | tr ':' '\n' | grep -c .)
        echo "hooks-found=$hooks_count" >> $GITHUB_OUTPUT
        echo "wiki-files=$wiki_files" >> $GITHUB_OUTPUT
        echo "Found $hooks_count hook documentation files"

    - name: Commit and push wiki changes
      shell: bash
      run: |
        wiki_dir="${{ inputs.wiki-directory }}"
        cd "$wiki_dir"
        git config --global --add safe.directory "$wiki_dir"
        if [ -d ".git" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update hook documentation from ${GITHUB_REPOSITORY}@${GITHUB_SHA::7}"
            git push origin master
            echo "Wiki updated successfully"
          fi
        else
          echo "Wiki files generated in 'wiki' directory but no git repository found"
        fi

branding:
  icon: "book-open"
  color: "blue"
